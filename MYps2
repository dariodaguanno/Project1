//
// Created by dario on 9/8/2022.
//
//The first delivery is simply to get arguments through linux and use getopts()

#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>
#include <limits.h>
#include <stdbool.h>

#define MAX_BUFF 2048

//parse arguments
struct opts parseArgs(int argc, char *argv[]);

//we will need a function to retrieve the pid for all processes of current user when no pid
//is given
void psAllPids(struct opts procArgs);

//PrintPs() will run the pid given and print the respective information
void printPs(char *pid, struct opts procArgs);

//Using a struct seems to be the best way to hold arguments
struct opts{
    char *pid;
    bool state;
    bool time;
    bool sysTime;
    bool virtMem;
    bool cmdLine;
};

int main(int argc, char *argv[]){
    struct opts procArgs = parseArgs(argc, argv);
    //if no pid is given then it will run for all of the running processes
    if(procArgs.pid == NULL){
        psAllPids(procArgs);
    }
    else{
        printPs(procArgs.pid, procArgs);
    }
    return 0;
}
//the parseArgs() function to parse the arguments passed to it. It will look for -p with
//a PID number, -s, -U, -S, -V, -C
struct opts parseArgs(int argc, char *argv[]){
    struct opts MYstruct;
    int optNum;
    MYstruct.pid = NULL;
    MYstruct.state = false;
    MYstruct.time = true;
    MYstruct.sysTime = false;
    MYstruct.virtMem = false;
    MYstruct.cmdLine = true;
    while((optNum = getopt(argc, argv, ":-p:-s-U-S-V-C")) != -1){
        //switch case for all of the options. Then store these options in a struct to be used later in
        //the program
        //print statements are used to make sure the arguments are saved
        switch(optNum) {
            case 'p':
                printf("you have chose p\n");
                MYstruct.pid = optarg;
                break;
            case 's':
                printf("you have chose s\n");
                MYstruct.state = true;
                break;
            case 'U':
                printf("you have chose U\n");
                MYstruct.time = false;
                break;
            case 'S':
                printf("you have chose S\n");
                MYstruct.sysTime = true;
                break;
            case 'V':
                printf("you have chose V\n");
                MYstruct.virtMem = true;
                break;
            case 'C':
                printf("you have chose C\n");
                MYstruct.cmdLine = false;
                break;
            case '?':
                printf("No such argument %c\n", optopt);
                break;
        }
    }
    return MYstruct;
}

void printPs(char *pid, struct opts procArgs){
    char statPath[PATH_MAX];
    char statmPath[PATH_MAX];
    char cmdLinePath[PATH_MAX];

    FILE *fp;

    char buf[MAX_BUFF];


    //sprintf to access the status, statm, and cmdline
    //stat will be used when -s and display single-character state, amount of user time consumed when
    //no -U, when -S and display amount of system time consumed
    sprintf(statPath, "/proc/%s/stat", pid);
    //statm will be used when -v and will display the amount of virtual mem currently used
    sprintf(statmPath, "/proc/%s/statm", pid);
    //cmdLine will be used to display command-line that started this program when no -c
    sprintf(cmdLinePath, "/proc/%s/cmdLine", pid);

    //stat
    fp = fopen(statPath, "r");
    if(fp == NULL){
        printf("Could not open file: /proc/%s/stat\n", pid);
        exit(1);
    }
    while(fgets(buf, sizeof(buf), fp) != NULL){

    }
    fclose(fp);

    //statm
    if(procArgs.virtMem){
        fp = fopen(statmPath, "r");
        if(fp == NULL){
            printf("Could not open file: /proc/%s/statm\n", pid);
            exit(1);
        }

        fclose(fp);
    }

    //cmdLine
    if(procArgs.cmdLine){
        fp = fopen(cmdLinePath, "r");
        if(fp == NULL){
            printf("Could not open file: /proc/%s/cmdLine\n", pid);
            exit(1);
        }
        char c;
        c = fgetc(fp);//fgetc gets the next character in the file
        while(c != EOF){//This will run until EOF is empty
            printf("%c", c);
            c = fgetc(fp);
        }
        fclose(fp);
    }
    printf("\n");
}

void psAllPids(struct opts procArgs){
    DIR *d;
    struct dirent *dir;
    char idPath[PATH_MAX] = "/proc/";
    FILE *fp;
    //getuid() returns the real user ID of the calling process
    int userId = getuid();
    //compareId will be used to compare userId from getuid() and the id given from the opened file
    int compareId;

    d = opendir("/proc");
    if(d == NULL){
        printf("Could not open /proc directory");
        exit(1);
    }
//The while loop here will parse through every process in the system
    while((dir = readdir(d)) != NULL){
        //sprintf() works great here to concatenate the pid into the path. strcat will not work
        //as it continues to concatenate the next pid after the while loop
        sprintf(idPath, "/proc/%s/loginuid", dir->d_name);
        fp = fopen(idPath, "r");

        if(fp == NULL){
            continue;
        }
        else {
            fscanf(fp, "%d", &compareId);
            if (compareId == userId) {
                printf("%s is the current user's process\n", dir->d_name);
                printPs(dir->d_name, procArgs);
            }
            /*This else statement was used to make sure that all pid's were being read
            else{
                printf("%s is NOT chill\n", dir->d_name);
            }*/
        }
    }
}
